{"version":3,"sources":["D:/mcmc/mcmc-db-master/webadmin/node_modules/ngx-captcha/fesm5/ngx-captcha.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAudM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuUA,AAGA;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkJH,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmLA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgLA,AAGA;;;;;;;;;;gGAKG;;;;;;;;;;;;;;;;;;;;;;;KAuBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAmBC","file":"ngx-captcha.js","sourcesContent":["import { EventEmitter, Input, Output, Injectable, NgZone, Component, forwardRef, Renderer2, Injector, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { __extends } from 'tslib';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/base-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nvar BaseReCaptchaComponent = /** @class */ (function () {\r\n    function BaseReCaptchaComponent(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = 'ngx_captcha_id_';\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = 'image';\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ngAfterViewInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.control = this.injector.get(NgControl).control;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ngAfterViewChecked = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    };\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getResponse = /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    };\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCaptchaId = /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.captchaId;\r\n    };\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.resetCaptcha = /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // reset captcha using Google js api\r\n            _this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            _this.onChange(undefined);\r\n            _this.onTouched(undefined);\r\n            // trigger reset event\r\n            _this.reset.next();\r\n        }));\r\n    };\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCurrentResponse = /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.currentResponse;\r\n    };\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reloadCaptcha = /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.setupComponent();\r\n    };\r\n    /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ensureCaptchaElem = /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    function (captchaElemId) {\r\n        /** @type {?} */\r\n        var captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(\"Captcha element with id '\" + captchaElemId + \"' was not found\");\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    };\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.renderReCaptcha = /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.captchaId = _this.reCaptchaApi.render(_this.captchaElemId, _this.getCaptchaProperties());\r\n            _this.ready.next();\r\n        }));\r\n    };\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.handleCallback = /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    function (callback) {\r\n        var _this = this;\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.onChange(callback);\r\n            _this.onTouched(callback);\r\n        }));\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getPseudoUniqueNumber = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupComponent = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        function (grecaptcha) {\r\n            _this.onloadCallback(grecaptcha);\r\n        }), this.hl);\r\n    };\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.onloadCallback = /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    function (grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(\"ReCaptcha Api was not initialized correctly\");\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.generateNewElemId = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.createAndSetCaptchaElem = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(\"Captcha elem Id is not set\");\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(\"Captcha DOM element is not initialized\");\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n        // create new wrapper for captcha\r\n        /** @type {?} */\r\n        var newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    };\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.writeValue = /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    function (obj) { };\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.registerOnChange = /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this.onChange = fn;\r\n    };\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.registerOnTouched = /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this.onTouched = fn;\r\n    };\r\n    /**\r\n    * Handles error callback\r\n    */\r\n    /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.handleErrorCallback = /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.onChange(undefined);\r\n            _this.onTouched(undefined);\r\n        }));\r\n        this.error.next();\r\n    };\r\n    /**\r\n    * Handles expired callback\r\n    */\r\n    /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.handleExpireCallback = /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    };\r\n    BaseReCaptchaComponent.propDecorators = {\r\n        siteKey: [{ type: Input }],\r\n        useGlobalDomain: [{ type: Input }],\r\n        type: [{ type: Input }],\r\n        hl: [{ type: Input }],\r\n        tabIndex: [{ type: Input }],\r\n        success: [{ type: Output }],\r\n        load: [{ type: Output }],\r\n        reset: [{ type: Output }],\r\n        ready: [{ type: Output }],\r\n        error: [{ type: Output }],\r\n        expire: [{ type: Output }]\r\n    };\r\n    return BaseReCaptchaComponent;\r\n}());\r\nif (false) {\r\n    /**\r\n     * Prefix of the captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemPrefix;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupCaptcha;\r\n    /**\r\n     * Google's site key.\r\n     * You can find this under https://www.google.com/recaptcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.siteKey;\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.useGlobalDomain;\r\n    /**\r\n     * Type\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.type;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.hl;\r\n    /**\r\n     * Tab index\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.tabIndex;\r\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.success;\r\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.load;\r\n    /**\r\n     * Called when captcha is reset.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reset;\r\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ready;\r\n    /**\r\n     * Error callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.error;\r\n    /**\r\n     * Expired callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.expire;\r\n    /** @type {?} */\r\n    BaseReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * Indicates if captcha should be set on load\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupAfterLoad;\r\n    /**\r\n     * Captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElem;\r\n    /**\r\n     * Id of the captcha elem\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaId;\r\n    /**\r\n     * Holds last response value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.currentResponse;\r\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;\r\n    /**\r\n     * Captcha type\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * Required by ControlValueAccessor\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onChange;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onTouched;\r\n    /**\r\n     * Indicates if captcha is loaded\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.isLoaded;\r\n    /**\r\n     * Reference to global reCaptcha API\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reCaptchaApi;\r\n    /**\r\n     * Id of the DOM element wrapping captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemId;\r\n    /**\r\n     * Form Control to be enable usage in reactive forms\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.control;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.scriptService;\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCaptchaProperties = function () { };\r\n    /**\r\n     * Used for captcha specific setup\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/recaptcha-type.enum.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nvar ReCaptchaType = {\r\n    InvisibleReCaptcha: 0,\r\n    ReCaptcha2: 1,\r\n};\r\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\r\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ScriptService = /** @class */ (function () {\r\n    function ScriptService(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    ScriptService.prototype.registerCaptchaScript = /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    function (useGlobalDomain, render, onLoad, language) {\r\n        var _this = this;\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                onLoad(window[_this.windowGrecaptcha]);\r\n            }));\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha])); }))));\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        var scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ScriptService.prototype.cleanup = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    };\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ScriptService.prototype.grecaptchaScriptLoaded = /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    ScriptService.prototype.getLanguageParam = /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    function (hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return \"&hl=\" + hl;\r\n    };\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    ScriptService.prototype.getCaptchaScriptUrl = /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    function (useGlobalDomain, render, language) {\r\n        /** @type {?} */\r\n        var domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return \"https://www.\" + domain + \"/recaptcha/api.js?onload=\" + this.windowOnLoadCallbackProperty + \"&render=\" + render + this.getLanguageParam(language);\r\n    };\r\n    ScriptService.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    ScriptService.ctorParameters = function () { return [\r\n        { type: NgZone }\r\n    ]; };\r\n    return ScriptService;\r\n}());\r\nif (false) {\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowGrecaptcha;\r\n    /**\r\n     * Name of the global callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowOnLoadCallbackProperty;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.globalDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.defaultDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/invisible-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar InvisibleReCaptchaComponent = /** @class */ (function (_super) {\r\n    __extends(InvisibleReCaptchaComponent, _super);\r\n    function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {\r\n        var _this = _super.call(this, renderer, zone, injector, scriptService) || this;\r\n        _this.renderer = renderer;\r\n        _this.zone = zone;\r\n        _this.injector = injector;\r\n        _this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        _this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        _this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        _this.badge = 'bottomright';\r\n        _this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n    };\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.execute = /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // execute captcha\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.reCaptchaApi.execute(_this.captchaId); }));\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.captchaSpecificSetup = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n    };\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.getCaptchaProperties = /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            function (response) { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleCallback(response); })); }),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleExpireCallback(); })); }),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleErrorCallback(); })); }),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    };\r\n    InvisibleReCaptchaComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: \"\\n  <div #captchaWrapperElem></div>\",\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return InvisibleReCaptchaComponent; })),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    InvisibleReCaptchaComponent.ctorParameters = function () { return [\r\n        { type: Renderer2 },\r\n        { type: NgZone },\r\n        { type: Injector },\r\n        { type: ScriptService }\r\n    ]; };\r\n    InvisibleReCaptchaComponent.propDecorators = {\r\n        theme: [{ type: Input }],\r\n        badge: [{ type: Input }],\r\n        hl: [{ type: Input }],\r\n        captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n    };\r\n    return InvisibleReCaptchaComponent;\r\n}(BaseReCaptchaComponent));\r\nif (false) {\r\n    /**\r\n     * This size representing invisible captcha\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.size;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.theme;\r\n    /**\r\n     * Badge\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.badge;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.hl;\r\n    /** @type {?} */\r\n    InvisibleReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/recaptcha-2.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ReCaptcha2Component = /** @class */ (function (_super) {\r\n    __extends(ReCaptcha2Component, _super);\r\n    function ReCaptcha2Component(renderer, zone, injector, scriptService) {\r\n        var _this = _super.call(this, renderer, zone, injector, scriptService) || this;\r\n        _this.renderer = renderer;\r\n        _this.zone = zone;\r\n        _this.injector = injector;\r\n        _this.scriptService = scriptService;\r\n        /**\r\n         * Name of the global expire callback\r\n         */\r\n        _this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n         * Name of the global error callback\r\n         */\r\n        _this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        _this.theme = 'light';\r\n        /**\r\n         * Size\r\n         */\r\n        _this.size = 'normal';\r\n        _this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ReCaptcha2Component.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ReCaptcha2Component.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    ReCaptcha2Component.prototype.captchaSpecificSetup = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.registerCallbacks();\r\n    };\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    ReCaptcha2Component.prototype.getCaptchaProperties = /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            function (response) { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleCallback(response); })); }),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleExpireCallback(); })); }),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.handleErrorCallback(); })); }),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    };\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ReCaptcha2Component.prototype.registerCallbacks = /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        window[this.windowOnErrorCallbackProperty] = _super.prototype.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = _super.prototype.handleExpireCallback.bind(this);\r\n    };\r\n    ReCaptcha2Component.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: \"\\n  <div #captchaWrapperElem></div>\",\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((/**\r\n                             * @return {?}\r\n                             */\r\n                            function () { return ReCaptcha2Component; })),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    ReCaptcha2Component.ctorParameters = function () { return [\r\n        { type: Renderer2 },\r\n        { type: NgZone },\r\n        { type: Injector },\r\n        { type: ScriptService }\r\n    ]; };\r\n    ReCaptcha2Component.propDecorators = {\r\n        theme: [{ type: Input }],\r\n        size: [{ type: Input }],\r\n        hl: [{ type: Input }],\r\n        captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n    };\r\n    return ReCaptcha2Component;\r\n}(BaseReCaptchaComponent));\r\nif (false) {\r\n    /**\r\n     * Name of the global expire callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;\r\n    /**\r\n     * Name of the global error callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.theme;\r\n    /**\r\n     * Size\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.size;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.hl;\r\n    /** @type {?} */\r\n    ReCaptcha2Component.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/recaptcha_v3.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ReCaptchaV3Service = /** @class */ (function () {\r\n    function ReCaptchaV3Service(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    ReCaptchaV3Service.prototype.execute = /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    function (siteKey, action, callback, config) {\r\n        this.executeAsPromise(siteKey, action, config).then(callback);\r\n    };\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    ReCaptchaV3Service.prototype.executeAsPromise = /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    function (siteKey, action, config) {\r\n        var _this = this;\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        function (resolve, reject) {\r\n            /** @type {?} */\r\n            var useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n            /** @type {?} */\r\n            var onRegister = (/**\r\n             * @param {?} grecaptcha\r\n             * @return {?}\r\n             */\r\n            function (grecaptcha) {\r\n                _this.zone.runOutsideAngular((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action: action })\r\n                            .then((/**\r\n                         * @param {?} token\r\n                         * @return {?}\r\n                         */\r\n                        function (token) { return _this.zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return resolve(token); })); }));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }));\r\n            });\r\n            _this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\r\n        }));\r\n    };\r\n    ReCaptchaV3Service.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    ReCaptchaV3Service.ctorParameters = function () { return [\r\n        { type: ScriptService },\r\n        { type: NgZone }\r\n    ]; };\r\n    return ReCaptchaV3Service;\r\n}());\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.scriptService;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-captcha.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar NgxCaptchaModule = /** @class */ (function () {\r\n    function NgxCaptchaModule() {\r\n    }\r\n    NgxCaptchaModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                },] }\r\n    ];\r\n    return NgxCaptchaModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-captcha.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"]}